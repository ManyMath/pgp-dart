// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `pgp-ffi`.  See the README for how to use this file.
///
class PgpFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PgpFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PgpFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Decrypts a message and returns the plaintext.
  ffi.Pointer<ffi.Char> decrypt_message(
    ffi.Pointer<ffi.Char> cert_str,
    ffi.Pointer<ffi.Char> ciphertext,
  ) {
    return _decrypt_message(
      cert_str,
      ciphertext,
    );
  }

  late final _decrypt_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('decrypt_message');
  late final _decrypt_message = _decrypt_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Encrypts a message and returns the ciphertext.
  ffi.Pointer<ffi.Char> encrypt_message(
    ffi.Pointer<ffi.Char> cert_str,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _encrypt_message(
      cert_str,
      message,
    );
  }

  late final _encrypt_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('encrypt_message');
  late final _encrypt_message = _encrypt_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Exports the generated key in ASCII-armored format.
  ffi.Pointer<ffi.Char> export_ascii_key(
    ffi.Pointer<ffi.Char> cert_str,
  ) {
    return _export_ascii_key(
      cert_str,
    );
  }

  late final _export_ascii_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('export_ascii_key');
  late final _export_ascii_key = _export_ascii_keyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// Generates an encryption-capable key.
  ffi.Pointer<ffi.Char> generate_key() {
    return _generate_key();
  }

  late final _generate_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'generate_key');
  late final _generate_key =
      _generate_keyPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}
